# -*- coding: utf-8 -*-
"""3A_COLADILLA_MP2.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-tpGmxoiGkD58jvuvFJ6iMRyMzRox8YQ
"""

def and_operation(p, q):
    """Logical conjunction (AND)."""
    return p and q

def or_operation(p, q):
    """Logical disjunction (OR)."""
    return p or q

def not_operation(p):
    """Logical negation (NOT)."""
    return not p

def implies_operation(p, q):
    """Logical implication (IMPLIES)."""
    return not p or q

def evaluate(statement, values):
    """Evaluate a logical statement based on given truth values."""
    # Replace logical operators with Python equivalents
    statement = statement.replace('AND', 'and').replace('OR', 'or').replace('NOT', 'not')
    statement = statement.replace('(', ' ( ').replace(')', ' ) ')

    # Split the statement into tokens
    tokens = statement.split()

    # Evaluate the statement using a stack
    stack = []

    for token in tokens:
        if token in values:
            stack.append(values[token])
        elif token == 'not':
            stack.append(not stack.pop())
        elif token in ['and', 'or']:
            right = stack.pop()
            left = stack.pop()
            if token == 'and':
                stack.append(left and right)
            elif token == 'or':
                stack.append(left or right)
        else:
            raise ValueError(f"Unknown token: {token}")

    return stack[0] if stack else None

def forall(predicate, domain):
    """Evaluate the universal quantifier (FOR ALL)."""
    return all(predicate(x) for x in domain)

def exists(predicate, domain):
    """Evaluate the existential quantifier (EXISTS)."""
    return any(predicate(x) for x in domain)

class SimpleAIAgent:
    def __init__(self, health, opponent_health):
        self.health = health
        self.opponent_health = opponent_health

    def decide_action(self):
        """Decide whether to 'Attack' or 'Defend' based on health conditions."""
        # Define the decision logic
        attack_condition = (self.health > 50) or (self.opponent_health < 30)
        defend_condition = self.health <= 50

        # Use logical operations to determine action
        if and_operation(attack_condition, not_operation(defend_condition)):
            return "Attack"
        elif defend_condition:
            return "Defend"
        else:
            return "Attack"  # Default action if no other conditions met

"""Here's a breakdown of each function and its purpose:

1. and_operation(p, q): Implements the logical AND operation.
2. or_operation(p, q): Implements the logical OR operation.
3. not_operation(p): Implements the logical NOT operation.
4. implies_operation(p, q): Implements the logical IMPLIES operation.
5. evaluate(statement, values): Evaluates a logical statement based on the given truth values. It replaces logical operators with Python equivalents, splits the statement into tokens, and uses a stack to evaluate the expression.
6. forall(predicate, domain): Evaluates the universal quantifier (FOR ALL) by checking if the given predicate holds true for all elements in the specified domain.
7. exists(predicate, domain): Evaluates the existential quantifier (EXISTS) by checking if there is at least one element in the specified domain for which the predicate holds true.

**SimpleAIAgent class:**
  * ___init_ __(self, health, opponent_health): Initializes the agent with its health and the opponent's health.

  * decide_action(self): Decides whether to "Attack" or "Defend" based on the agent's health and the opponent's health. It uses logical conditions and the previously defined logical functions to determine the action.
  These scripts provide the necessary functions and classes to work with propositional logic, predicate logic, and a simple AI agent that uses logical reasoning for decision-making.

"""